CREATE TABLE EMP(
    NO NUMBER,
    NAME VARCHAR2(20),
    AGE NUMBER
);

CREATE TABLE CUSTOMER (
    --PRIMARY KEY: UNIQUE + NOT NULL => 절대 중복될 수 없고, NULL을 가질 수 없음.
    ID NUMBER PRIMARY KEY,
    --NOT NULL을 지정해두면 NULL을 저장할 수 없음.
    NAME VARCHAR2(20) NOT NULL,
    ADDRESS VARCHAR(100)
);

CREATE TABLE ORDERS (
    ORDER_ID NUMBER PRIMARY KEY,
    SALESMAN_ID NUMBER,
    ORDER_DATE DATE NOT NULL
);

CREATE TABLE CATEGORIES (
    CATEGORY_ID NUMBER PRIMARY KEY,
    CATEGORY_NAME VARCHAR2(100) NOT NULL
);

CREATE TABLE LOCATION (
    LOCATION_ID NUMBER PRIMARY KEY,
    ADDRESS VARCHAR2(255) NOT NULL,
    POSTAL_CODE VARCHAR2(20),
    CITY VARCHAR2(50)
);

CREATE TABLE EMP2
(
    EMPNO NUMBER(5) NOT NULL,   --5자리의 정수
    NUM1 NUMBER(5), --5자리의 정수
    NUM2 NUMBER(5, 2),  --5자리의 숫자(정수 3자리, 소수점 이하 2자리 -> 소수점 이하 3자리에서 반올림)
    NUM3 NUMBER(5, -1)  --최종 5자리의 숫자(소수점 왼쪽 첫자리(-1)에서 반올림)
);

INSERT INTO EMP2 VALUES(12345, 12345, 123.123, 12342.1);

CREATE TABLE EMP3
(
    EMPNO NUMBER(5) NOT NULL,   --5자리의 정수
    NUM1 NUMBER(5), --5자리의 정수
    NUM2 NUMBER(5, 3),  --5자리의 숫자(정수 3자리, 소수점 이하 3자리 -> 소수점 이하 4자리에서 반올림)
    NUM3 NUMBER(5, -2)  --최종 5자리의 숫자(소수점 왼쪽 첫자리(-2)에서 반올림)
);

INSERT INTO EMP3 VALUES(12345, 12345, 12.1234, 45678.1);

--INSERT문 (데이터 추가)

INSERT INTO CUSTOMER(ID, NAME, ADDRESS) VALUES(1, '둘리', '인천');  --일부 컬럼만 사용할 경우
INSERT INTO CUSTOMER(ID, NAME) VALUES(2, '둘리');
INSERT INTO CUSTOMER(ID, NAME) VALUES(3, '홍길동');
--INSERT INTO CUSTOMER(ID, ADRESS) VALUES(4, '서울');   --NULLABLE이 NO인 경우는 반드시 데이터를 넣어줘야 한다.
INSERT INTO CUSTOMER VALUES(4, '또치', '');   --주소에 공백을 넣음.(공백을 넣어도  NULL이 들어간다.)
INSERT INTO CUSTOMER VALUES(5, '홍길동', NULL);
--NULL이 허용 가능한 컬럼인 경우, 1)공백일 때 2)NULL을 넣을 때 "3)아무것도 안 넣을 때 모두 NULL로 들어간다.
--INSERT INTO CUSTOMER(ID, NAME) VALUES(3, '홍길동');    --ID컬럼은 PRIMARY KEY라서 데이터가 중복될 수 없음. 3은 이미 쓰였기 때문에 오류 발생
--INSERT INTO CUSTOMER(ID) VALUES(6); --이렇게 작성 시 NAME은 NULL이 들어가게 된다. 하지만 NAME은 NOT NULL이라 오류 발생 !

INSERT INTO ORDERS(ORDER_ID, SALESMAN_ID, ORDER_DATE) VALUES(1001, 1002, SYSDATE);  --현재 시간
INSERT INTO ORDERS(ORDER_ID, SALESMAN_ID, ORDER_DATE) VALUES(1002, 1002, '2022-08-27'); --특정 시간
INSERT INTO ORDERS(ORDER_ID, SALESMAN_ID, ORDER_DATE) VALUES(1003, 1002, TO_DATE('2022-08-27', 'YYYY-MM-DD'));  --특정 포맷
--TO_DATE(넣을 날짜, 형식): DATE형식으로 바꿔주는 함수
INSERT INTO ORDERS(ORDER_ID, SALESMAN_ID, ORDER_DATE) VALUES(1004, 1002, TO_DATE('2022-08-27 10:10:10', 'YYYY-MM-DD HH24:MI:SS'));

INSERT INTO CUSTOMER VALUES(6, '홍길동홍길동', NULL);

INSERT INTO CUSTOMER VALUES(2, '둘리', '인천'); --전체 컬럼을 다 사용할 경우

--ALTER문
ALTER TABLE CUSTOMER ADD GENDER VARCHAR2(9);    --컬럼 추가
ALTER TABLE CUSTOMER RENAME COLUMN GENDER TO GEN;   --컬럼 이름 변경
ALTER TABLE CUSTOMER RENAME COLUMN GEN TO GENDER;   --원복
ALTER TABLE CUSTOMER MODIFY GENDER VARCHAR2(100);   --테이블 크기 변경
ALTER TABLE CUSTOMER MODIFY GENDER VARCHAR2(100) DEFAULT 'NONE' NOT NULL;   --테이블 크기,2 디폴트, NOR NULL까지 모두 변경
ALTER TABLE CUSTOMER MODIFY GENDER NUMBER;  --자료형(타입) 변경
ALTER TABLE CUSTOMER MODIFY GENDER NOT NULL;    --제약 조건 추가
COMMENT ON COLUMN CUSTOMER.GENDER IS '성별';  --성별 달기

ALTER TABLE CUSTOMER DROP COLUMN GENDER;    --컬럼 삭제

--오라클 캐릭터셋 확인 쿼리문
select * from nls_database_parameters where parameter = 'NLS_CHARACTERSET';

--2장. SQL기본 ppt 20p 테이블 구조 변경 문제
ALTER TABLE EMP ADD SALARY NUMBER;  --컬럼 추가
ALTER TABLE EMP MODIFY SALARY NOT NULL; --제약 조건 추가
COMMENT ON COLUMN EMP.SALARY IS '급여';   --코멘트 추가
COMMENT ON COLUMN EMP.NO IS '번호';
COMMENT ON COLUMN EMP.NAME IS '이름';
COMMENT ON COLUMN EMP.AGE IS '나이';

ALTER TABLE ORDERS ADD CUSTOMER_NAME VARCHAR2(50) NOT NULL; --컬럼 추가 + 제약조건
ALTER TABLE ORDERS MODIFY SALESMAN_ID VARCHAR2(50); --자료형 변경
ALTER TABLE ORDERS RENAME COLUMN SALESMAN_ID TO SALESMAN_NAME;  --컬럼명 변경
ALTER TABLE ORDERS MODIFY ORDER_DATE NULL;  --제약 조건 추가
COMMENT ON COLUMN ORDERS.SALESMAN_NAME IS '사원명';    --코멘트 추가
COMMENT ON COLUMN ORDERS.ORDER_ID IS '주문번호';
COMMENT ON COLUMN ORDERS.ORDER_DATE IS '주문일자';
COMMENT ON COLUMN ORDERS.CUSTOMER_NAME IS '고객명';

--테이블 삭제 (DROP)
DROP TABLE EMP;
DROP TABLE CATEGORIES;
DROP TABLE CUSTOMER;
DROP TABLE EMP2;
DROP TABLE EMP3;
DROP TABLE LOCATION;
DROP TABLE ORDERS;

--2장. SQL기본 ppt 31p 데이터 추가 문제
--퀴즈1
CREATE TABLE BOOK (
    BOOK_NO NUMBER PRIMARY KEY,
    TITLE VARCHAR2(50) NOT NULL,
    PUBLISHER VARCHAR2(100) NOT NULL,
    PRICE NUMBER
);

--퀴즈2
INSERT INTO BOOK VALUES(1, '역사1', '상상마당', 30000);
INSERT INTO BOOK VALUES(2, '역사2', '상상마당', 30000);
INSERT INTO BOOK VALUES(3, '스프링웹프로젝트', '한빛미디어', 50000);
INSERT INTO BOOK(BOOK_NO, TITLE, PUBLISHER) VALUES(4, '자바개발도서', '생능출판');

--퀴즈3
INSERT INTO EMP VALUES('', '', '');
INSERT INTO EMP(NO) VALUES(1);
INSERT INTO EMP(NAME, AGE) VALUES('둘리', 10);
INSERT INTO EMP VALUES('1', '둘리', 10);

--퀴즈4
CREATE TABLE CONTACT (
    CONTACT_NO NUMBER PRIMARY KEY,
    FIRST_NAME VARCHAR2(20) NOT NULL,
    LAST_NAME VARCHAR2(50) NOT NULL,
    EMAIL VARCHAR2(100),
    PHONE VARCHAR2(20)
);

INSERT INTO CONTACT VALUES(1, '이', '서연', 'flor.stone@gamil.com', '010-3717-2341');
INSERT INTO CONTACT VALUES(2, '이', '시우', 'lavera.emerson@gamil.com', '010-3717-4111');
INSERT INTO CONTACT VALUES(3, '김', '지호', 'shyla.ortiz@gamil.com', '010-3717-4126');
INSERT INTO CONTACT VALUES(4, '김', '윤서', 'jeny.levy@gamil.com', '010-8121-2341');
INSERT INTO CONTACT(CONTACT_NO, FIRST_NAME, LAST_NAME, EMAIL) VALUES(5, '최', '수아', 'fern.head@gamil.com');

--퀴즈5
CREATE TABLE CALENDAR (
    MONTH VARCHAR2(20),
    DAY_WEEK VARCHAR2(20),
    DAY VARCHAR2(20)
);

INSERT INTO CALENDAR VALUES('1', '일', '1');
INSERT INTO CALENDAR VALUES('1', '월', '2');
INSERT INTO CALENDAR VALUES('1', '화', '3');
INSERT INTO CALENDAR VALUES('1', '수', '4');
INSERT INTO CALENDAR VALUES('1', '목', '5');
INSERT INTO CALENDAR VALUES('1', '금', '6');
INSERT INTO CALENDAR VALUES('1', '토', '7');

--퀴즈6
CREATE TABLE GIFTSET (
    NO NUMBER PRIMARY KEY,
    NAME VARCHAR2(100) NOT NULL,
    PRICE NUMBER
);

INSERT INTO GIFTSET VALUES(1, '참치세트', 100000);
INSERT INTO GIFTSET VALUES(2, '샴푸세트', 200000);
INSERT INTO GIFTSET VALUES(3, '세차용품세트', 300000);
INSERT INTO GIFTSET VALUES(4, '주방용품세트', 400000);
INSERT INTO GIFTSET VALUES(5, '산악용자전거', 500000);
INSERT INTO GIFTSET VALUES(6, 'LCD모니터', 600000);
INSERT INTO GIFTSET VALUES(7, '노트북', 700000);
INSERT INTO GIFTSET VALUES(8, '벽걸이TV', 800000);
INSERT INTO GIFTSET VALUES(9, '드럼세탁기', 900000);
INSERT INTO GIFTSET VALUES(10, '양쪽문냉장고', 1000000);

--UPDATE
UPDATE CUSTOMER SET ADDRESS='서울' WHERE ID=2;    --CUSTOMER TABLE에서 ID가 2인 행의 ADDRESS 값을 서울로 바꾼다.
UPDATE CUSTOMER SET NAME='훈이', ADDRESS='제주도' WHERE ID=3; --2개 이상의 데이터를 바꾸고 싶을 때는 컴마로 연결한다.
UPDATE ORDERS SET ORDER_DATE=SYSDATE WHERE ORDER_ID=1002;

UPDATE BOOK SET PRICE=10000 WHERE BOOK_NO=1;
UPDATE BOOK SET PRICE=11000 WHERE BOOK_NO=2;
UPDATE BOOK SET TITLE='자바프로그래밍' WHERE BOOK_NO=4;

--DELETE
DELETE FROM CUSTOMER WHERE ID=4;
DELETE FROM CUSTOMER WHERE NAME='둘리';
DELETE FROM CUSTOMER;   --전체 행 삭제
DELETE FROM ORDERS WHERE  ORDER_ID=1001 AND SALESMAN_ID = 2002;

--2장. SQL기본 ppt 38p 데이터 수정 문제
--퀴즈1
UPDATE BOOK SET TITLE='자바개발도서' WHERE BOOK_NO=4;
--퀴즈2
UPDATE BOOK SET PRICE=30000 WHERE PUBLISHER='상상마당';
--퀴즈3
UPDATE CUSTOMER SET NAME='둘리', ADDRESS='인천';

--2장. SQL기본 ppt 43p 데이터 삭제 문제
--퀴즈1
DELETE FROM BOOK WHERE TITLE='역사2' AND PUBLISHER='상상마당';
--퀴즈2
DELETE FROM BOOK WHERE BOOK_NO=3;
--퀴즈3
DELETE FROM BOOK WHERE PRICE IS NULL;
--퀴즈4
DELETE FROM BOOK;


--SELECT
SELECT * FROM CUSTOMER; --모든 컬럼을 다 가져온다.
SELECT NAME AS CUS FROM CUSTOMER;  --해당 컬럼만 가져온다. (SELECT 컬럼명 뒤에 'AS 별칭': 조회할 때 임의로 컬럼명 설정 가능) 
SELECT NAME, ID FROM CUSTOMER;
--SELECT-ORDER BY
SELECT * FROM CUSTOMER ORDER BY ID ASC; --오름차순
SELECT * FROM CUSTOMER ORDER BY ID DESC; --내림차순
SELECT * FROM CUSTOMER ORDER BY NAME ASC;
SELECT * FROM CUSTOMER ORDER BY ADDRESS ASC;
--SELECT-GROUP BY
SELECT * FROM GIFT;
SELECT TYPE FROM GIFT GROUP BY TYPE;    --TYPE 컬럼으로 그룹화(중복된 데이터를 그룹핑한다.)
SELECT TYPE, SUM(PRICE) AS SUM FROM GIFT GROUP BY TYPE;    --SUM: 합산
SELECT TYPE, COUNT(price) AS COUNT FROM GIFT GROUP BY TYPE;   --COUNT: 갯수

--조건 검색
--비교연산자
SELECT * FROM CUSTOMER WHERE ID = 1;
SELECT * FROM CUSTOMER WHERE ID > 1;
SELECT * FROM CUSTOMER WHERE ID < 4;
SELECT * FROM CUSTOMER WHERE ID >= 1;
SELECT * FROM CUSTOMER WHERE ID <= 4;
SELECT * FROM CUSTOMER WHERE ID != 1;
--문자열도 비교연산자 적용 가능.
SELECT * FROM CUSTOMER WHERE NAME = '둘리';
SELECT * FROM CUSTOMER WHERE NAME > '둘리';
SELECT * FROM CUSTOMER WHERE NAME < '둘리';
--DATE 형식 적용
SELECT * FROM ORDERS WHERE ORDER_DATE > '2022/01/01';
SELECT * FROM ORDERS WHERE ORDER_DATE > '2022-01-02';
--논리연산자
SELECT * FROM CUSTOMER;
SELECT * FROM CUSTOMER WHERE NAME = '둘리' AND ADDRESS = '서울';
SELECT * FROM CUSTOMER WHERE ADDRESS = '인천' OR ADDRESS = '서울';
SELECT * FROM CUSTOMER WHERE NOT ADDRESS = '서울';    --ADDRESS가 NULL 인 레코드는 가져오지 않는다.
--산술연산자
SELECT * FROM ORDERS;
SELECT ORDER_ID + SALESMAN_ID AS PLUS FROM ORDERS;
SELECT (ORDER_ID + SALESMAN_ID) * ORDER_ID AS PLUS FROM ORDERS;
--합성연산자
SELECT '이름: ' || NAME || '입니다.' AS INTRO FROM CUSTOMER;


--2장. SQL기본 ppt 53p 데이터 추가 문제
--퀴즈1
SELECT * FROM BOOK WHERE PRICE = 11000 OR PRICE = 25000;
--퀴즈2
SELECT * FROM BOOK WHERE PRICE > 30000;
--퀴즈3
SELECT * FROM BOOK WHERE PRICE >= 10000 AND PRICE <= 30000;
--퀴즈4
SELECT * FROM BOOK WHERE PUBLISHER = '한빛미디어' OR PUBLISHER = '생능출판';
--퀴즈5
SELECT * FROM ORDERS WHERE ORDER_DATE > '2022-01-02';
SELECT * FROM ORDERS WHERE ORDER_DATE > TO_DATE('20220102', 'YYYYMMDD');    --TO_DATE: 문자열을 날짜 형식으로 바꿔줌
SELECT * FROM ORDERS WHERE ORDER_DATE <5) SYSDATE;
--퀴즈6
SELECT * FROM ORDERS WHERE ORDER_DATE = '2022-01-01';

--범위 연산자
SELECT * FROM CUSTOMER WHERE ID BETWEEN 2 AND 4;    --ID 값이 2~4인 레코드 검색
SELECT * FROM CUSTOMER WHERE ID NOT BETWEEN 2 AND 4; --2~4를 제외한 레코드 검색
SELECT * FROM CUSTOMER WHERE ID IN(1,2,3);  --ID값이 1,2,3인 레코드 검색
SELECT * FROM CUSTOMER WHERE ID NOT IN(1,2,3); --ID값이 1,2,3이 아닌 레코드 검색
--패턴 연산자
SELECT * FROM CUSTOMER WHERE NAME LIKE '둘%';    --'둘'로 시작하는 문자열이 있는 레코드 검색 
SELECT * FROM CUSTOMER WHERE NAME LIKE '%길%';   --중간에 '길'이 있는 문자열 레코드 검색
SELECT * FROM CUSTOMER WHERE NAME LIKE '%치';    --'치'로 끝나는 문자열이 있는 레코드 검색
--빈값 체크 연산자
SELECT * FROM CUSTOMER WHERE ADDRESS IS NULL;


--2장. SQL기본 ppt 55p 데이터 조회 문제
--퀴즈1
SELECT * FROM BOOK WHERE PRICE BETWEEN 10000 AND 30000;
--퀴즈2
SELECT * FROM CONTACTS WHERE FIRST_NAME = '김' OR FIRST_NAME = '최';
SELECT * FROM CONTACTS WHERE FIRST_NAME IN('김', '최');
--퀴즈3
SELECT * FROM GIFT WHERE NO IN(7,8,10);
--퀴즈4
SELECT * FROM GIFT WHERE TYPE IN('생활용품', '운동장비');
--퀴즈5
SELECT * FROM GIFT WHERE PRICE BETWEEN 300000 AND 600000;
--2장. SQL기본 ppt 57p 데이터 조회 문제
--퀴즈1
SELECT * FROM CONTACTS WHERE PHONE LIKE '%2341';
--퀴즈2
SELECT * FROM CONTACTS WHERE PHONE LIKE '%3171%';
--퀴즈3
SELECT * FROM CONTACTS WHERE EMAIL LIKE '%naver%' AND PHONE IS NULL;
--퀴즈4
SELECT * FROM GIFT WHERE NAME LIKE '%용품%';
--퀴즈5
SELECT * FROM GIFT WHERE NAME LIKE '%세트' AND PRICE < 300000;

--함수
--문자 함수
SELECT CHR(65) FROM DUAL;   --아스키코드
SELECT LOWER('JENNIE') FROM DUAL;   --소문자로 변환
SELECT UPPER(EMAIL) AS EMAIL FROM CONTACTS; --대문자로 변환
--LTRIM
SELECT LTRIM('    JENNIE') FROM DUAL;   --왼쪽 공백 제거
SELECT LTRIM('블랙핑크', '블랙') FROM DUAL;   --문자열의 왼쪽부터 비교하여 '블랙'과 일치하는 문자열 제거
--RTRIM
SELECT RTRIM('JENNIE     ') FROM DUAL;  --오른쪽 공백 제거
SELECT RTRIM('블랙핑크', '핑크') FROM DUAL;   --문자열의 오른쪽부터 비교하여 '핑크'와 일치하는 문자열 제거
--TRIM
SELECT TRIM('        JENNIE       ') FROM DUAL;     --문자열 양쪽 공백 제거
SELECT TRIM('        JEN NIE       ') FROM DUAL;    --문자열 사이에 있는 공백은 제거하지 않음
SELECT TRIM(LEADING '블' FROM '블랙핑크') FROM DUAL; --앞쪽에서부터 비교하여 특정 문자 제거
SELECT TRIM(TRAILING '크' FROM '블랙핑크') FROM DUAL;    --뒷쪽에서부터 비교하여 특정 문자 제거
SELECT TRIM(BOTH '블' FROM '블랙핑크블') FROM DUAL;   --문자열 양쪽 모두 비교하여 특정 문자 제거
--SUBSTR (문자열을 잘라주는 함수)
SELECT SUBSTR('블랙핑크제니', 3,2) FROM DUAL; -- 3부터 시작하여 2개를 자름
SELECT SUBSTR('블랙핑크제니', 3) FROM DUAL; -- 3부터 시작하여 끝까지 자름
--LENGTH
SELECT LENGTH('블랙핑크') FROM DUAL;    --문자열의 길이를 반환
--REPLACE (문자열 변경)
SELECT REPLACE ('블랙핑크제니', '제니', '지수') FROM DUAL;    --블랙핑크제니에서 제니를 지수로 바꿈
SELECT REPLACE ('블랙핑크제니', '제니') FROM DUAL;           --변경할 문자열이 없을 경우 제거
SELECT REPLACE (LAST_NAME, '시', '새') FROM CONTACTS;


--숫자 함수
SELECT ABS(-1) FROM DUAL;   --수의 절대값 반환
SELECT SIGN(-1234) FROM DUAL;   --수의 부호를 반환. 양수면 1, 음수면 -1, 0이면 0 반환
--숫자 대신에 컬럼이 올 수 있음
SELECT ROUND(163.76, 3) FROM DUAL;  --지정된 자릿수까지 반올림. (1의 자리는 0, -1부터 10의 자리, 1부터 소수점 이하)
SELECT TRUNC(54.69, 0) FROM DUAL; --1의 자리를 버리고 반환(음수일 경우) / 소수점 자릿수까지 반올림하여 반환(양수일 경우)
SELECT CEIL(54.29) FROM DUAL;   --소수점을 전부 없애고 올림
SELECT FLOOR(54.29) FROM DUAL;  --소수점 버리기
SELECT MOD(15, 7) FROM DUAL;    --15 나누기 7 의 나머지

--날짜 함수
SELECT EXTRACT (YEAR FROM SYSDATE) AS YEAR FROM DUAL;
SELECT EXTRACT (YEAR FROM ORDER_DATE) AS YEAR FROM ORDERS;
SELECT EXTRACT (MONTH FROM ORDER_DATE) AS MONTH FROM ORDERS;
SELECT EXTRACT (DAY FROM ORDER_DATE) AS DAY FROM ORDERS;

SELECT ADD_MONTHS(TO_DATE('2021-12-31', 'YYYY-MM-DD'), -1) AS ADD_MONTHS FROM DUAL;
SELECT ADD_MONTHS(SYSDATE, -1) AS ADDMONTH FROM DUAL;

--명시적 형변환 : 변환 함수를 사용하여 데이터 유형 변환을 명시적으로 나타냄
--SELECT TO_NUMBER('ASA') FROM DUAL;  --문자형을 숫자형으로 변환할 수 없음. 에러 발생
SELECT TO_CHAR(1234) FROM DUAL;
SELECT TO_CHAR(SYSDATE) FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD') FROM DUAL; --원하는 형식이 있을 경우 포맷팅을 해주면 됨 !

--NULL 관련 함수
SELECT NAME, NVL(ADDRESS, '주소 없음') AS ADDRESS FROM CUSTOMER;
SELECT NAME, NULLIF(ADDRESS, '인천') AS ADDRESS FROM CUSTOMER;

SELECT NAME, COALESCE(NAME, ADDRESS) AS AD FROM CUSTOMER;
SELECT NAME, COALESCE(ADDRESS, NAME) AS AD FROM CUSTOMER;

--DECODE 함수
SELECT ID, DECODE(ID, 1, 'BLUE', 2, 'RED', 3, 'YELLOW', 4, 'BLACK', 5, 'WHITE') AS DECODE FROM CUSTOMER;
SELECT ID,
    CASE WHEN ID=1 THEN 'BLUE'
         WHEN ID=2 THEN 'RED'
         WHEN ID=3 THEN 'YELLOW'
         WHEN ID=4 THEN 'BLACK'
         ELSE 'WHITE'
    END AS TEST
FROM CUSTOMER;

--2장. SQL기본 ppt 65p 함수 문제
--1. 2 / 2. 1 / 3. 3 / 4. 2 
--퀴즈5
SELECT NAME, 
    CASE WHEN NAME='둘리' THEN 'BLUE'
         WHEN NAME='또치' THEN 'RED'
         ELSE 'WHITE'
    END AS TEST
FROM CUSTOMER;